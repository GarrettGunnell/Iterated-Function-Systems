#pragma kernel InitializeParticles
#pragma kernel ChaosGame

RWStructuredBuffer<float3> _PositionBuffer;
StructuredBuffer<float3> _Attractors;
uint _PointCount;


float _Time, _R, _RScale, _DeltaTime, _Size;

float hash(uint n) {
    // integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

[numthreads(8,8,1)]
void InitializeParticles(uint3 id : SV_DispatchThreadID) {
    _PositionBuffer[id.x] = 0;
}

[numthreads(8,8,1)]
void ChaosGame(uint3 id : SV_DispatchThreadID) {
    float3 currentPos = _PositionBuffer[id.x];

    uint seed = id.x + currentPos.x * 1111 + currentPos.y * 1141 + currentPos.z * 1103;

    float rand = hash(seed);
    uint index = floor(rand * _PointCount);

    float3 attractor = _Attractors[index] * _Size;

    float3 newPosition = (currentPos + attractor) * _R * _RScale;
    
    _PositionBuffer[id.x] = newPosition;
}