#pragma kernel InitializeParticles
#pragma kernel ApplyDebugTransform
#pragma kernel AffineTransformChaos

RWStructuredBuffer<float4> _PositionBuffer;

StructuredBuffer<float4x4> _Transformations;

uint _Seed, _TransformationCount, _DebugIndex, _CubeResolution;
float _CubeSize;

float hash(uint n) {
    // integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float3 to3D(uint idx) {
    uint3 voxelRes = _CubeResolution;
    uint x = idx % (voxelRes.x);
    uint y = (idx / voxelRes.x) % voxelRes.y;
    uint z = idx / (voxelRes.x * voxelRes.y);

    return float3(x, y, z);
}

[numthreads(8,1,1)]
void InitializeParticles(uint3 id : SV_DispatchThreadID) {
    _PositionBuffer[id.x] = float4(to3D(id.x) * _CubeSize, 1);
}

[numthreads(8, 1, 1)] 
void ApplyDebugTransform(uint3 id : SV_DispatchThreadID) {
    float4 currentPos = _PositionBuffer[id.x];

    float4x4 attractor = _Transformations[_DebugIndex];

    float4 newPosition = float4(currentPos.xyz, 1.0f);
    newPosition = mul(attractor, newPosition);

    _PositionBuffer[id.x] = float4(newPosition.xyz, 1);
}

[numthreads(8, 1, 1)] 
void AffineTransformChaos(uint3 id : SV_DispatchThreadID) {
    float4 currentPos = _PositionBuffer[id.x];

    uint seed = _Seed + id.x + (currentPos.w + 1) + ceil(dot(currentPos.xyz, float3(1103, 1072, 947)));

    float rand = hash(seed);
    uint index = floor(rand * _TransformationCount);

    float4x4 attractor = _Transformations[index];

    float4 newPosition = float4(currentPos.xyz, 1.0f);
    newPosition = mul(attractor, newPosition);

    _PositionBuffer[id.x] = float4(newPosition.xyz, index);
}